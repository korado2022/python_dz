# Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, 54.4, 5.4, 34.40, 98.72, 47.67, 85.12, 98.35, 24.46, 81.42, 69.53,
# 36.82, 76.21, 29.25, 38.93, 76.58]
# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или
# 00 коп).
# B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
# объект списка после сортировки остался тот же).
# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
# возрастанию, написав минимум кода?

list_price = [57.8, 46.51, 97, 54.4, 5.4, 34.40, 98.72, 47.67, 85.12, 98.35,
              24.46, 81.42, 69.53, 36.82, 76.21, 29.25, 38.93, 76.58]

res = ''
print('Задание А:')
for num in list_price:
    if num % 1 == 0:
        res = res + f'{num} руб 00 коп, '
        continue

    num_fl = str(num).split('.')
    res = res + f'{num_fl[0]} руб {num_fl[1].zfill(2)} коп, '

print(res)

# Подпункт В
print('Задание В:')
print(id(list_price))           # id списка до сортировки
list_price.sort()               # Сортировка списка без создания нового списка
print(list_price)               # Вывод отсортированного списка
print(id(list_price))           # id списка после сортировки

# Подпункт С
print('Задание C:')
list_price_sort = sorted(list_price, reverse=True)
print(list_price_sort)

# Подпункт D
print('Задание D:')
print(sorted(list_price)[-5:])
